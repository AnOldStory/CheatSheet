{"version":3,"sources":["store/modules/route.js","store/modules/index.js","store/index.js","store/configure.js","container/navigation/NavigationContainer.js","component/MainLink.js","container/main/MainContainer.js","container/sidebar/SidebarContainer.js","component/Top.js","component/CodeViewer.js","component/CodeName.js","component/CodeText.js","component/CodeLink.js","component/Loading.js","container/presenter/PresenterContainer.js","route/Router.js","Root.js","serviceWorker.js","index.js"],"names":["set","createAction","value","initialState","Map","path","handleActions","Object","defineProperty","state","action","payload","combineReducers","route","configure","devTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","modules","NavigationContainer","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMain","bind","assertThisInitialized","history","replace","react_default","a","createElement","className","id","onClick","Component","MainLink","handleSet","event","RouteActions","react_router_dom","to","language","connect","dispatch","bindActionCreators","routeActions","MainContainer","languageList","map","lang","i","component_MainLink","key","SidebarContainer","Scrollspy_default","items","title","currentClassName","componentTag","text","href","Top","CodeViewer","_ref","type","code","lib","component","CodeName","name","CodeText","CodeLink","Loading","PresenterContainer","loaded","contents","_this2","match","params","fetch","process","then","res","temp","parser","sidebarparser","split","length","trim","push","component_CodeName","component_CodeViewer","component_CodeText","component_CodeLink","console","log","setState","catch","err","Fragment","component_Loading","container_sidebar_SidebarContainer","component_Top","get","App","basename","react_router","exact","container_main_MainContainer","Root","es","store","Router","Boolean","location","hostname","ReactDOM","render","src_Root","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9abfee3.chunk.js","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\n\nconst SET = \"route/SET\";\n\nexport const set = createAction(SET, value => value);\n\nconst initialState = Map({\n  path: \"Regexp\"\n});\n\nexport default handleActions(\n  {\n    [SET]: (state, action) => {\n      return state.set(\"path\", action.payload);\n    }\n  },\n  initialState\n);\n","import { combineReducers } from \"redux\";\nimport route from \"./route\";\n\nexport default combineReducers({\n  route\n});\n","import configure from \"./configure\";\nexport default configure();\n","import { createStore } from \"redux\";\nimport modules from \"./modules\";\n\nconst configure = () => {\n  // const store = createStore(modules);\n  const devTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n  const store = createStore(modules, devTools);\n\n  return store;\n};\n\nexport default configure;\n","import React, { Component } from \"react\";\n\nimport \"./NavigationContainer.scss\";\n\nclass NavigationContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMain = this.handleMain.bind(this);\n  }\n  handleMain() {\n    this.props.history.replace(\"/\");\n  }\n  render() {\n    return (\n      <div className=\"navigation\" id=\"Top\">\n        <div className=\"navigation-brand\" onClick={this.handleMain}>\n          <strong>Cheat Sheet</strong>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavigationContainer;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as routeActions from \"store/modules/route\";\n\nclass MainLink extends Component {\n  handleSet = (path, event) => {\n    const { RouteActions } = this.props;\n    RouteActions.set(path);\n  };\n  render() {\n    return (\n      <Link\n        className=\"main-link\"\n        to={this.props.language}\n        onClick={this.handleSet.bind(this, this.props.language)}\n      >\n        <div className=\"main-link-span\">{this.props.language}</div>\n      </Link>\n    );\n  }\n}\nexport default connect(\n  null,\n  dispatch => ({\n    RouteActions: bindActionCreators(routeActions, dispatch)\n  })\n)(MainLink);\n","import React, { Component } from \"react\";\n\nimport MainLink from \"component/MainLink\";\n\nimport \"./MainContainer.scss\";\n\nclass MainContainer extends Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"main-box\">\n          {this.props.languageList.map((lang, i) => {\n            return <MainLink language={lang} key={i} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MainContainer;\n","import React, { Component } from \"react\";\nimport Scrollspy from \"react-scrollspy\";\n\nimport \"./SidebarContainer.scss\";\n\nclass SidebarContainer extends Component {\n  render() {\n    return (\n      <Scrollspy\n        className=\"sidebar\"\n        items={this.props.title}\n        currentClassName=\"sidebar-li-active\"\n        componentTag={\"div\"}\n      >\n        {this.props.title.map((text, i) => {\n          return (\n            <li className=\"sidebar-li\" key={i}>\n              <a href={\"#\" + text}>{text}</a>\n            </li>\n          );\n        })}\n      </Scrollspy>\n    );\n  }\n}\n\nexport default SidebarContainer;\n","import React from \"react\";\n\nconst Top = () => {\n  return (\n    <div className=\"presenter-link presenter-top\">\n      <a href=\"#Top\">↑</a>\n    </div>\n  );\n};\n\nexport default Top;\n","import React from \"react\";\nimport { PrismCode } from \"react-prism\";\n\nconst CodeViewer = ({ type, code }) => {\n  return (\n    <div className=\"presenter-code\">\n      <PrismCode component=\"pre\" className={\"language-\" + type}>\n        {code}\n      </PrismCode>\n    </div>\n  );\n};\n\nexport default CodeViewer;\n","import React from \"react\";\n\nconst CodeName = ({ name, id }) => {\n  return (\n    <div className=\"presenter-name\" id={id}>\n      {name}\n    </div>\n  );\n};\n\nexport default CodeName;\n","import React from \"react\";\n\nconst CodeText = ({ text }) => {\n  return <div className=\"presenter-text\">{text}</div>;\n};\n\nexport default CodeText;\n","import React from \"react\";\n\nconst CodeLink = ({ name, href, id }) => {\n  return (\n    <div className=\"presenter-link\">\n      <a href={href} id={id}>\n        {name}\n      </a>\n    </div>\n  );\n};\n\nexport default CodeLink;\n","import React from \"react\";\n\nconst Loading = () => {\n  return <div className=\"loading\" />;\n};\n\nexport default Loading;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport * as routeActions from \"store/modules/route\";\n\nimport SidebarContainer from \"container/sidebar/SidebarContainer\";\n\nimport Top from \"component/Top\";\nimport CodeViewer from \"component/CodeViewer\";\nimport CodeName from \"component/CodeName\";\nimport CodeText from \"component/CodeText\";\nimport CodeLink from \"component/CodeLink\";\n\nimport Loading from \"component/Loading\";\n\nimport \"./PresenterContainer.scss\";\nimport { bindActionCreators } from \"redux\";\n\nclass PresenterContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: 0,\n      contents: [],\n      title: []\n    };\n  }\n  componentDidMount() {\n    if (this.props.path !== this.props.match.params.lang) {\n      const { RouteActions } = this.props;\n      RouteActions.set(this.props.match.params.lang);\n    }\n    fetch(\n      process.env.PUBLIC_URL + \"/docs/\" + this.props.match.params.lang + \".ep\"\n    )\n      .then(res => {\n        return res.text();\n      })\n      .then(text => {\n        let parser = [];\n        let sidebarparser = [];\n        let type, temp;\n\n        /* parse start */\n        text = text\n          .replace(/-=\\[/gi, \"title^^^\")\n          .replace(/\\]=-/gi, \"^^^\")\n          .replace(/--\\[/gi, \"code^^^\")\n          .replace(/\\]--/gi, \"~~~\")\n          .replace(/----/gi, \"^^^\")\n          .replace(/=-\\[/gi, \"text^^^\")\n          .replace(/]-=/gi, \"^^^\")\n          .replace(/-=>/gi, \"link^^^\")\n          .replace(/<=-/gi, \"~~~\")\n          .replace(/-><-/gi, \"^^^\")\n          .split(\"^^^\");\n\n        for (let i = 0; i < text.length; i++) {\n          if (i % 2 === 0) {\n            type = text[i].trim();\n          } else {\n            switch (type) {\n              case \"title\":\n                parser.push(\n                  <CodeName\n                    name={text[i].trim()}\n                    key={i / 2}\n                    id={text[i].trim()}\n                  />\n                );\n                sidebarparser.push(text[i].trim());\n                break;\n              case \"code\":\n                temp = text[i].split(\"~~~\");\n                parser.push(\n                  <CodeViewer\n                    type={temp[0].trim()}\n                    code={temp[1].trim()}\n                    key={i / 2}\n                  />\n                );\n                break;\n              case \"text\":\n                parser.push(<CodeText text={text[i].trim()} key={i / 2} />);\n                break;\n              case \"link\":\n                temp = text[i].split(\"~~~\");\n                parser.push(\n                  <CodeLink\n                    name={temp[0].trim()}\n                    href={temp[1].trim()}\n                    key={i / 2}\n                  />\n                );\n                break;\n              default:\n                console.log(type);\n                console.log(text[i]);\n                parser.push(<CodeText text={\"parse Error!\"} key={i / 2} />);\n            }\n          }\n        }\n\n        /* parse end */\n        this.setState({\n          loaded: 1,\n          contents: parser,\n          title: sidebarparser\n        });\n      })\n      .catch(err => console.log(err));\n  }\n  render() {\n    return (\n      <>\n        {this.state.loaded === 0 ? (\n          <Loading />\n        ) : (\n          <SidebarContainer title={this.state.title} />\n        )}\n        <div className=\"presenter\">\n          <div className=\"presenter-box\">\n            <div className=\"presenter-brand\">{this.props.path}</div>\n            {this.state.contents.map(lang => {\n              return lang;\n            })}\n          </div>\n        </div>\n        <Top />\n      </>\n    );\n  }\n}\n\nexport default connect(\n  value => ({\n    path: value.route.get(\"path\")\n  }),\n  dispatch => ({\n    RouteActions: bindActionCreators(routeActions, dispatch)\n  })\n)(PresenterContainer);\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport NavigationContainer from \"container/navigation/NavigationContainer\";\nimport MainContainer from \"container/main/MainContainer\";\nimport PresenterContainer from \"container/presenter/PresenterContainer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      languageList: [\n        \"Algorithm\",\n        \"C\",\n        \"C++\",\n        \"CSS\",\n        \"Java\",\n        \"Linux\",\n        \"Machine Learning\",\n        \"Markdown\",\n        \"Node.js\",\n        \"OCaml\",\n        \"Python\",\n        \"React\",\n        \"Regexp\"\n      ]\n    };\n    // ABCDE FGHIJ KLMNO PQRST UVWXY Z\n  }\n  render() {\n    return (\n      <BrowserRouter basename=\"/CheatSheet\">\n        <>\n          <Route path=\"/\" component={NavigationContainer} />\n          <Route\n            exact\n            path=\"/\"\n            component={() => (\n              <MainContainer languageList={this.state.languageList} />\n            )}\n          />\n\n          <Switch>\n            <Route path=\"/:lang\" component={PresenterContainer} />\n          </Switch>\n        </>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport Router from \"./route/Router\";\n\nconst Root = () => {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  );\n};\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport Root from \"./Root\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}